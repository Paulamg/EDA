find.package ("devtools")
install.packages ("devtools")
find_rtools()
library(devtools)
find_rtools()
install.package(KernSmooth)
install.package("KernSmooth")
install.packages("KernSmooth")
copyright
library(KernSmooth)
install.packages("swirl")
getwd()
sqr = seq(1, 100 by=2)
sqr.squared = NULL
for (n in 1:50)
{
sqr.squared[n] = sqr[n]^2
}
sqr <- seq(1, 100 by=2)
sqr <- seq(1, 100, by=2)
sqr.squared <- NULL
for (n in 1:50)
{
sqr.squared[n] = sqr[n]^2
}
sqr.squared
sqr
for(i in 1:10){print(i)}
x <- c("a", "b", "c", "d")
for(i in 1:4) {
print(x[i])
}
x <- c("a", "b", "c", "d")
for(i in 1:5) {
print(x[i])
}
for(letter in x) {
print(letter)
}
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
}
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i])
}
}
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[j])
}
}
y <- function(x)
?makevector
?makeVector
a <- a:d
a <- c(a:d)
a <- matrix()
a <- c(a:d)
a <- c(A:D)
a <- c(A, B, C, D)
a <- matrix(data=NA, nrow=2, ncol=2)
a <- c(A, B, C, D)
a <- c(A, B, C, D)
a <- c(a, b, c, d)
a <- matrix(data=c(a,b,c,d), nrow=2, ncol=2)
a <- matrix(data=c(1:4), nrow=2, ncol=2)
inverse(a)
solve(a)
setmean <- function(mean)  { m <- mean }
setmean(8)
setmean
a <- mean
myObj <- list(makeVector(sample(0:1000,100,replace=T)))
source('~/.active-rstudio-document')
myObj <- list(makeCacheMatrix(sample(0:1000,100,replace=T)))
cacheSolve(miobj)
cacheSolve(myobj)
set <- function(y) {
x <<- y
m <<- NULL
}
set(1)
source('~/.active-rstudio-document')
cacheSolve(myobj)
myObj <- list(makeCacheMatrix(sample(0:1000,100,replace=T)))
myobj <- makeCacheMatrix(1:20)
rm(myobj)
rm(myobj)
z <- makeCacheMatrix(1:20)
cacheSolve(z)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
z <- makeCacheMatrix(1:20)
cacheSolve(z)
source('~/.active-rstudio-document')
makeCacheMatrix(1:2000)
a <- makeCacheMatrix(1:2000)
a
cacheSolve(a)
a$get
a
source('~/.active-rstudio-document')
a <- makeCacheMatrix(1:2000)
a$get
cacheSolve(a)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
bigVec <- makeCacheMatrix(1:1000)
cacheSolve(bigvec)
cacheSolve(bigVec)
a <- makeCacheMatrix(matrix(c(1,1,1,3,4,3,3,3,4),3,3))
cacheSolve(a)
a$getinv
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
sapply(flags, class, character(1))
ok()
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(swirl)
swirl()
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
?LETTERS
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replacement=TRUE, prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob =
0.7)
flips2 <- rbinom(1, size = 100, prob =
0.7)
flips2 <- rbinom(100, size = 1, prob =
0.7)
flip2
flips2
sum(flips2)
?rnorm
rnomr(10)
rnorm(10)
rnorm(10, mean=100, sd=25)
rpois(5, mean=10)
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1<- sys.date()
d1<- Sys.date()
d1<- Sys.Date()
class(d1)
unclass(d1)
d1
as.Date("1969-01-01")
d2 <-as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time
t1 <- Sys.time(})
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(swirl)
install_from_swirl("Data Analysis")
install_from_swirl("Mathematical Biostatistics Boot Camp")
install_from_swirl("Getting and Cleaning Data")
swirl
swirl()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactos=FALSE)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
pacckageVersion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf).
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, ountry:r_arch)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
select(cran, (-5:20))
-5:20
-(5:20)
select(cran, -(x, size))
select(cran, -(x:size))
select(cran, -(5:20))
select(cran, -(x:size))
select(cran, -(X:size))
(cran, package == "swirl")
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?comparison
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os=="linux-gnu")
filter(cran, size > 100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, descc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size +1000)
summarize(cran, avg_bytes=mean(size))
library(xlsx)
quiz2 <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx
", destfile="quiz.csv")
quiz2 <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx
", destfile="quiz.xlsx")
quiz2 <- Read.xlsx("quiz.xlsx", sheetIndex=1, header:TRUE)
quiz2 <- read.xlsx("quiz.xlsx", sheetIndex=1, header:TRUE)
library(xlsx)
quiz2 <- read.xlsx("quiz.xlsx", sheetIndex=1, header:TRUE)
library(rJava)
library(data.table)
quiz2 <- data.table("quiz.xlsx", sheetIndex=1, header:TRUE)
quiz2 <- read.table("quiz.xlsx", sheetIndex=1, header:TRUE)
quiz2 <- read.table("quiz.csv", header=TRUE, sep= ",")
quiz2 <- read.table("quiz.xlsx", header=TRUE, sep= ",")
View(quiz2)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx
", destfile="quiz.xlsx")
library(xlsxjars)
library(xlsx)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile="quiz.csv")
DT <-  fread("quiz.csv", header=TRUE, sep= ",")
library(xlsx)
library(sqldf)
install.package(sqldf)
installpackage(sqldf)
install.packages(sqldf)
install.packages(RMySQL)
install.packages("sqldf")
read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv ")
x <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv ")
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv ")
x <- sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
x <- sqldf("select pwgtp1 from acs where AGEP < 50")
View(x)
View(acs)
z <- sqldf("select distinct AGEP from acs")
View(x)
View(z)
library(httr)
library("httr")
con=url("http://biostat.jhsph.edu/~jleek/contact.html ")
y <- readLines(con)
?nchar
nchar(y)
nchar(y(c(10, 20,30,100)))
nchar(y[c(10,20)])
nchar(y[c(10,20, 30, 100)])
z <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ")
View(z)
z[1, ]
names(z)
?read.csv
z <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ", sep="")
View(z)
sum(z$data)
z <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ", sep="", skip=2)
z <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ", header=TRUE, sep="", skip=2)
View(z)
z <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ", header=TRUE, sep="", skip=2)
z <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ", header=FALSE, sep="", skip=2)
View(z)
z <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ", header=TRUE, sep="", skip=3)
View(z)
sum(z$SST.1)
class(z$SST.1)
sum(as.numeric(z$SST.1))
r <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ", header=TRUE, sep="", skip=3)
r <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ", header=TRUE, sep="", skip=3)
r <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ", widths=c(14,5,8,5,8,5,8,5,8)header=TRUE, sep="", skip=3)
r <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ", widths=c(14,5,8,5,8,5,8,5,8), header=TRUE, sep="", skip=3)
r <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ", widths=c(14,5,8,5,8,5,8,5,8), sep="", skip=4)
View(r)
r <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ", widths=c(14,5,8,5,8,5,8,5,8), skip=4)
View(r)
sum(as.numeric(z$V4))
sum(z$V4)
sum(z$4)
sum(z[,4])
sum(as.numeric(z[,4]))
sum(as.numeric(r[,4]))
myapp <- oauth_app("cleaningdata", "917c09ca996ec40a9855",
"f31337ae0530d77a95b6ebd006efb4d99c80d418")   #first store the data of the app
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp) #nock on github with the app info and store the given token
myapp <- oauth_app("cleaningdata", "917c09ca996ec40a9855",
"f31337ae0530d77a95b6ebd006efb4d99c80d418")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.package("httpuv")
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
data<-fromJSON("req")
library(rjson)
install.packages("rjson")
library(rjson)
data<-fromJSON("req")
req
data<-fromJSON("req")
data<-fromJSON(file=req, method="C")
data<-fromJSON(file=req, method="C")
data <-xmlTreeParse(req, useInternal=TRUE)
library(XML)
data <-xmlTreeParse(req, useInternal=TRUE)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
BROWSE("https://api.github.com/users/jtleek/repos", "created at",authenticate("Access Token","x-oauth-basic","basic"))
swirl()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
View(cran)
by_package <- group_by(cran, package)
by_package
summarize(mean(by_package$size))
summarize(by_package, variable=mean(size))
summarize(by_package, mean(size))
source('~/.active-rstudio-document')
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, count)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, value)
res <- gather(students2, sex_class, count, -grade
)
res
?separate
separate(data=res, col=sex_class, into=c("sex", "class"))
submit()
sumbit()
submit()
sumbit()
submit()
submit()
students3
submit()
?spread
source('C:/Users/PAULAA~1/AppData/Local/Temp/Rtmpkrw2GJ/script3.R')
submit()
?extract_numeric
extract_numeric("class5")
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
rbind_list(passed, failed)
sat
submit()
submit()
submit()
submit()
setwd("F:/Coursera/Exploratory data analysis/project1")
unzip("exdata-data-household_power_consumption.zip")
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";")
library(dplyr)
data <- tbl_df(data)
data$Date=as.Date.factor(data$Date, "%d/%m/%Y")
dates <- filter(data, Date == "2007-02-01"| Date=="2007-02-02")
dates <- mutate(dates, Global_active_power = as.numeric(as.character(dates$Global_active_power)),
completedate = paste(Date, Time)
Sub_metering_1=as.numeric(dates$Sub_metering_1),
Sub_metering_2 =as.numeric(dates$Sub_metering_2))
dates$cd = strptime(dates$completedate, "%Y-%m-%d %H:%M:%S")
dates$cd <- as.POSIXct(dates$cd)
dates <- mutate(dates, Global_active_power = as.numeric(as.character(dates$Global_active_power)),
completedate = paste(Date, Time),
Sub_metering_1=as.numeric(dates$Sub_metering_1),
Sub_metering_2 =as.numeric(dates$Sub_metering_2))
dates$cd = strptime(dates$completedate, "%Y-%m-%d %H:%M:%S")
dates$cd <- as.POSIXct(dates$cd)
with(dates, plot(cd, Voltaje, pch="", ylab="Voltage", xlab="Datetime"))
lines(dates$cd, dates$Global_active_power))
with( dates, plot(cd, Voltage, pch="", ylab="Voltage", xlab="Datetime"))
lines(dates$cd, dates$Voltage)=
with(dates,
plot(cd, Voltage, pch="", ylab="Voltage", xlab="Datetime"))
lines(dates$cd, dates$Voltage)
)
with(dates,
plot(cd, Voltage, pch="", ylab="Voltage", xlab="Datetime"))
lines(dates$cd, dates$Voltage)
Sys.setlocale(category = "LC_TIME", locale = "C")
with(dates,
plot(cd, Voltage, pch="", ylab="Voltage", xlab="Datetime"))
lines(dates$cd, dates$Voltage)
View(dates)
with(dates,
plot(cd, Voltage, pch="", ylab="Voltage", xlab="Datetime"))
lines(dates$cd, dates$Voltage)
class(dates$Voltage)
data <- read.table("household_power_consumption.txt", header=TRUE, sep=";", stringsAsFactors = FALSE)
library(dplyr)
data <- tbl_df(data)
data$Date=as.Date.factor(data$Date, "%d/%m/%Y")
dates <- filter(data, Date == "2007-02-01"| Date=="2007-02-02")
dates <- mutate(dates, Global_active_power = as.numeric(as.character(dates$Global_active_power)),
completedate = paste(Date, Time),
Sub_metering_1=as.numeric(dates$Sub_metering_1),
Sub_metering_2 =as.numeric(dates$Sub_metering_2))
dates$cd = strptime(dates$completedate, "%Y-%m-%d %H:%M:%S")
dates$cd <- as.POSIXct(dates$cd)
dev.new(width=480, height=480)
with(dates,
plot(cd, Voltage, pch="", ylab="Voltage", xlab="Datetime"))
lines(dates$cd, dates$Voltage)
Global_reactive_power = as.numeric(as.character(dates$Global_reactive_power)),
Global_reactive_power = as.numeric(as.character(dates$Global_reactive_power))
dates$Global_reactive_power = as.numeric(as.character(dates$Global_reactive_power))
source('F:/Coursera/Exploratory data analysis/project1/plot4.R')
source('F:/Coursera/Exploratory data analysis/project1/plot4.R')
